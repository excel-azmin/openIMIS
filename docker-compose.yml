version: "3.7"

services:
  db:
    image: ghcr.io/openimis/openimis-pgsql:${DB_TAG:-latest}
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - INIT_MODE=${INIT_MODE}
    healthcheck:
      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - database:/var/lib/postgresql/data
    ports:
      - 5432:5432
    restart: always
    networks:
      - openimis-net

  frontend:
    image: ghcr.io/openimis/openimis-fe:${FE_TAG:-develop}
    restart: always
    environment:
      - REACT_APP_API_URL=api
      - NEW_OPENIMIS_HOST=${DOMAIN}
      - OPENIMIS_CONF_JSON=${OPENIMIS_FE_CONF_JSON}
      - OPENSEARCH_BASIC_TOKEN=${OPENSEARCH_BASIC_TOKEN}
    networks:
      - openimis-net
    ports:
      - ${HTTP_PORT:-8081}:80
      - ${HTTPS_PORT:-9443}:443
    depends_on:
      - backend
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  backend:
    image: ghcr.io/openimis/openimis-be:${BE_TAG:-develop}
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SITE_ROOT=api
      - SITE_URL=${DOMAIN}
      - CELERY_BROKER_URL=amqp://rabbitmq
      - DB_ENGINE=${DB_ENGINE}
      - MODE=${MODE:-Prod}
    networks:
      - openimis-net
    restart: always
    volumes:
    - photos:/openimis-be/openIMIS/images/insurees
    depends_on:
      - db
    command: start   

  worker:
    image: ghcr.io/openimis/openimis-be:${BE_TAG:-develop}
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SITE_ROOT=api
      - SITE_URL=${DOMAIN}
      - CELERY_BROKER_URL=amqp://rabbitmq
      - DB_ENGINE=${DB_ENGINE}
      - MODE=${MODE:-Prod}
    networks:
      - openimis-net
    restart: always
    volumes:
    - photos:/openimis-be/openIMIS/images/insurees
    depends_on:
      - db
    command: worker 

  rabbitmq:
    
    image: rabbitmq:3-management
    restart: always
    networks:
      - openimis-net

  opensearch:
    build:
      context: .
      dockerfile: ./opensearch-configuration/Dockerfile-openSearch-dev-
    environment:
      - "discovery.type=${DISCOVERY_TYPE:-single-node}"
      - "cluster.name=${CLUSTER_NAME:-my_opensearch_local}"
      - "http.port=${OPEN_SEARCH_HTTP_PORT:-9200}"
      - "plugins.security.ssl.http.enabled=${SLL_HTTP_ENABLED:-false}"
      - "plugins.security.disabled=true"
    networks:
      - openimis-net
    volumes:
      - opensearch-data1:/usr/share/opensearch/data

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.9.0
    environment:
      - OPENSEARCH_HOSTS=${OPENSEARCH_HOSTS:-http://opensearch:9200}
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
      - SERVER_BASEPATH=/opensearch
      - SERVER_REWRITEBASEPATH=true
    volumes:
      - ./conf/opensearch/opensearch.yml:/usr/share/opensearch-dashboards/config/opensearch.yml
    networks:
      - openimis-net

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  restapi:
    image: ghcr.io/openimis/openimis-rest_api:develop
    volumes:
      - ./conf/restapi:/app/config
      - ./logs:/app/log
      - photos:/app/photo
    restart: always
    depends_on:
      db:
        condition: service_healthy
    networks:
      - openimis-net

volumes:
  database:
  photos:
  opensearch-data1:

networks:
  openimis-net:
    driver: bridge
